managed implementation in class zbp_zi_travel_tp unique;
strict;
with draft;

define behavior for zzi_travel_tp alias Travel
persistent table ztravel
draft table ztravel_d
lock master
total etag LastChangedAt
authorization master ( instance )
etag master LastChangedAt
{
  create;
  update;
  delete ( features : instance );

  field ( readonly ) Description;
  field ( features : instance ) BookingFee;

  action AcceptTravel result [1] $self;
  determination calculate on modify { field BookingFee; }
  //  validation checkprice on save { field TotalPrice; }

  draft action Resume;
  draft action Edit;
  draft action Activate;
  draft action Discard;
  draft determine action Prepare;

  mapping for ztravel corresponding
  { TravelId = travel_id;
    AgencyId = agency_id;
    BeginDate = begin_date;
    EndDate = end_date;
    BookingFee = booking_fee;
    CreatedAt = created_at;
    CreatedBy = created_by;
    CurrencyCode = currency_code;
    CustomerId = customer_id;
    Description = description;
    OverallStatus = overall_status;
    TotalPrice = total_price;
  }
  association _Booking { create; with draft; }
}

define behavior for zzi_booking_tp alias Booking
persistent table zbooking
draft table zbooking_d
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{
  update;
  delete;

  field ( readonly ) TravelId;

  association _Travel { with draft; }
  association _BookSupplement { create; with draft; }

  mapping for zbooking corresponding
  { BookingDate = booking_date;
    BookingId = booking_id;
    BookingStatus = booking_status;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    CurrencyCode = currency_code;
    CustomerId = customer_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    LastChangedAt = last_changed_at;
    TravelId = travel_id; }
}

define behavior for zzi_booksuppl_tp alias BookingSupplement
persistent table zbooksuppl
draft table zbooksuppl_d
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{
  update;
  delete;

  field ( readonly ) TravelId, BookingId;

  association _Booking{ with draft;}
  association _Travel{ with draft; }

  mapping for zbooksuppl corresponding
  { BookingId = booking_id;
    CurrencyCode = currency_code;
    LastChangedAt = last_changed_at;
    BookingSupplementId = booking_supplement_id;
    Price = price;
    SupplementId = supplement_id;
    TravelId = travel_id; }

}